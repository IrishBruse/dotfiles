{
  "space": {
    "prefix": "space",
    "body": [
      "&nbsp;",
      ""
    ],
    "description": "&nbsp;"
  },
  "jsdoc-type": {
    "prefix": "@type",
    "body": [
      "/** @type {${1:any}} */",
      ""
    ],
    "description": "jsdoc Type Hint"
  },
  "sleep": {
    "prefix": "sleep",
    "body": [
      "await new Promise((res)=>setTimeout(res,${1:1000}))",
      ""
    ],
    "description": "await Promise with timeout"
  },
  "ctor": {
    "prefix": "ctor",
    "body": [
      "constructor()",
      "{",
      "  $0;",
      "}"
    ]
  },
  "test": {
    "prefix": "test",
    "body": [
      "test('$1', () => {",
      "  // $0",
      "})",
      ""
    ],
    "description": "jest test definition"
  },
  "func": {
    "prefix": "func",
    "body": [
      "const name = () => {",
      "  ${1:// }",
      "}",
      ""
    ]
  },
  "describe": {
    "prefix": "describe",
    "description": "jest describe definition",
    "body": [
      "describe('$1', () => {",
      "  // $0",
      "})",
      ""
    ]
  },
  "reduce": {
    "prefix": "reduce",
    "body": [
      "Object.keys($1).reduce(",
      "  (acc, ${2:curr}) => ({",
      "    ...acc,",
      "    [${2:curr}]: \"placeholder\",",
      "  }),",
      "  {}",
      ");$0",
      ""
    ],
    "description": "reduce using keys"
  },
  "useEffect": {
    "prefix": "useEffect",
    "body": [
      "useEffect(()=>{",
      "    $0",
      "},[])"
    ]
  },
  "useState": {
    "prefix": "useState",
    "body": [
      "const [${1:state}, setState] = useState($0);"
    ]
  },
  "comp func": {
    "prefix": "comp",
    "description": "Functional React Component",
    "body": [
      "const ${1:Component} = () => {",
      "  return (",
      "    $2",
      "  )",
      "};"
    ]
  }
}